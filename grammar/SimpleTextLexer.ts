// Generated from grammar/SimpleText.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SimpleTextLexer extends Lexer {
	public static readonly Word = 1;
	public static readonly Smiley = 2;
	public static readonly Url = 3;
	public static readonly DOT = 4;
	public static readonly QUESTION_MARK = 5;
	public static readonly EXCLAMATION_MARK = 6;
	public static readonly LPAREN = 7;
	public static readonly RPAREN = 8;
	public static readonly LACCOL = 9;
	public static readonly RACCOL = 10;
	public static readonly LBRACK = 11;
	public static readonly RBRACK = 12;
	public static readonly QUOTE = 13;
	public static readonly DQUOTE = 14;
	public static readonly COLON = 15;
	public static readonly COMMA = 16;
	public static readonly SEMICOLON = 17;
	public static readonly SMILEY = 18;
	public static readonly WS = 19;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"Word", "Smiley", "Url", "DOT", "QUESTION_MARK", "EXCLAMATION_MARK", "LPAREN", 
		"RPAREN", "LACCOL", "RACCOL", "LBRACK", "RBRACK", "QUOTE", "DQUOTE", "COLON", 
		"COMMA", "SEMICOLON", "SMILEY", "SPACE", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'.'", "'?'", "'!'", "'('", 
		"')'", "'{'", "'}'", "'['", "']'", undefined, "'\"'", "':'", "','", "';'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "Word", "Smiley", "Url", "DOT", "QUESTION_MARK", "EXCLAMATION_MARK", 
		"LPAREN", "RPAREN", "LACCOL", "RACCOL", "LBRACK", "RBRACK", "QUOTE", "DQUOTE", 
		"COLON", "COMMA", "SEMICOLON", "SMILEY", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SimpleTextLexer._LITERAL_NAMES, SimpleTextLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SimpleTextLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SimpleTextLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "SimpleText.g4"; }

	// @Override
	public get ruleNames(): string[] { return SimpleTextLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SimpleTextLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SimpleTextLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SimpleTextLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x15\x7F\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x03\x02\x07\x02-\n\x02" +
		"\f\x02\x0E\x020\v\x02\x03\x02\x06\x023\n\x02\r\x02\x0E\x024\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04?\n\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x06\x04G\n\x04\r\x04\x0E" +
		"\x04H\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03" +
		"\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x05\x0E`\n\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x12\x03\x12\x03\x13\x03\x13\x05\x13l\n\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13u\n\x13\x03\x14\x03\x14\x03\x15" +
		"\x06\x15z\n\x15\r\x15\x0E\x15{\x03\x15\x03\x15\x02\x02\x02\x16\x03\x02" +
		"\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11" +
		"\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10" +
		"\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x02)\x02\x15\x03\x02\t\x0E" +
		"\x02\v\f\x0E\x0F\"$*+..00==AA]]__}}\x7F\x7F\x0E\x02\v\f\x0E\x0F\"$)+." +
		".00<=AA]]__}}\x7F\x7F\x05\x022;C\\c|\x07\x02%%\'\'-]__c|\x03\x02<=\x06" +
		"\x02*+FFrr~~\x05\x02\v\f\x0E\x0F\"\"\x02\x85\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03" +
		"\x02\x02\x02\x02%\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x03.\x03\x02\x02" +
		"\x02\x056\x03\x02\x02\x02\x078\x03\x02\x02\x02\tJ\x03\x02\x02\x02\vL\x03" +
		"\x02\x02\x02\rN\x03\x02\x02\x02\x0FP\x03\x02\x02\x02\x11R\x03\x02\x02" +
		"\x02\x13T\x03\x02\x02\x02\x15V\x03\x02\x02\x02\x17X\x03\x02\x02\x02\x19" +
		"Z\x03\x02\x02\x02\x1B_\x03\x02\x02\x02\x1Da\x03\x02\x02\x02\x1Fc\x03\x02" +
		"\x02\x02!e\x03\x02\x02\x02#g\x03\x02\x02\x02%t\x03\x02\x02\x02\'v\x03" +
		"\x02\x02\x02)y\x03\x02\x02\x02+-\n\x02\x02\x02,+\x03\x02\x02\x02-0\x03" +
		"\x02\x02\x02.,\x03\x02\x02\x02./\x03\x02\x02\x02/2\x03\x02\x02\x020.\x03" +
		"\x02\x02\x0213\n\x03\x02\x0221\x03\x02\x02\x0234\x03\x02\x02\x0242\x03" +
		"\x02\x02\x0245\x03\x02\x02\x025\x04\x03\x02\x02\x0267\x05%\x13\x027\x06" +
		"\x03\x02\x02\x0289\x07j\x02\x029:\x07v\x02\x02:;\x07v\x02\x02;<\x07r\x02" +
		"\x02<>\x03\x02\x02\x02=?\x07u\x02\x02>=\x03\x02\x02\x02>?\x03\x02\x02" +
		"\x02?@\x03\x02\x02\x02@A\x07<\x02\x02AB\x071\x02\x02BC\x071\x02\x02CD" +
		"\x03\x02\x02\x02DF\t\x04\x02\x02EG\t\x05\x02\x02FE\x03\x02\x02\x02GH\x03" +
		"\x02\x02\x02HF\x03\x02\x02\x02HI\x03\x02\x02\x02I\b\x03\x02\x02\x02JK" +
		"\x070\x02\x02K\n\x03\x02\x02\x02LM\x07A\x02\x02M\f\x03\x02\x02\x02NO\x07" +
		"#\x02\x02O\x0E\x03\x02\x02\x02PQ\x07*\x02\x02Q\x10\x03\x02\x02\x02RS\x07" +
		"+\x02\x02S\x12\x03\x02\x02\x02TU\x07}\x02\x02U\x14\x03\x02\x02\x02VW\x07" +
		"\x7F\x02\x02W\x16\x03\x02\x02\x02XY\x07]\x02\x02Y\x18\x03\x02\x02\x02" +
		"Z[\x07_\x02\x02[\x1A\x03\x02\x02\x02\\]\x07\"\x02\x02]`\x07)\x02\x02^" +
		"`\x07)\x02\x02_\\\x03\x02\x02\x02_^\x03\x02\x02\x02`\x1C\x03\x02\x02\x02" +
		"ab\x07$\x02\x02b\x1E\x03\x02\x02\x02cd\x07<\x02\x02d \x03\x02\x02\x02" +
		"ef\x07.\x02\x02f\"\x03\x02\x02\x02gh\x07=\x02\x02h$\x03\x02\x02\x02ik" +
		"\t\x06\x02\x02jl\x07/\x02\x02kj\x03\x02\x02\x02kl\x03\x02\x02\x02lm\x03" +
		"\x02\x02\x02mn\t\x07\x02\x02nu\x05\'\x14\x02op\x07:\x02\x02pq\x07/\x02" +
		"\x02qr\x07+\x02\x02rs\x03\x02\x02\x02su\x05\'\x14\x02ti\x03\x02\x02\x02" +
		"to\x03\x02\x02\x02u&\x03\x02\x02\x02vw\t\b\x02\x02w(\x03\x02\x02\x02x" +
		"z\x05\'\x14\x02yx\x03\x02\x02\x02z{\x03\x02\x02\x02{y\x03\x02\x02\x02" +
		"{|\x03\x02\x02\x02|}\x03\x02\x02\x02}~\b\x15\x02\x02~*\x03\x02\x02\x02" +
		"\v\x02.4>H_kt{\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SimpleTextLexer.__ATN) {
			SimpleTextLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SimpleTextLexer._serializedATN));
		}

		return SimpleTextLexer.__ATN;
	}

}

