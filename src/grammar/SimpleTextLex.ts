// Generated from SimpleTextLex.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SimpleTextLex extends Lexer {
	public static readonly Math = 1;
	public static readonly Word = 2;
	public static readonly Smiley = 3;
	public static readonly Url = 4;
	public static readonly QUOT = 5;
	public static readonly DQUOT = 6;
	public static readonly LPAREN = 7;
	public static readonly RPAREN = 8;
	public static readonly LACCOL = 9;
	public static readonly RACCOL = 10;
	public static readonly LBRACK = 11;
	public static readonly RBRACK = 12;
	public static readonly BACKTICK = 13;
	public static readonly DOLLAR = 14;
	public static readonly LT = 15;
	public static readonly GT = 16;
	public static readonly DOT = 17;
	public static readonly QMARK = 18;
	public static readonly EMARK = 19;
	public static readonly ELLIPS = 20;
	public static readonly COMMA = 21;
	public static readonly COLON = 22;
	public static readonly SEMICOLON = 23;
	public static readonly SMILEY = 24;
	public static readonly WS = 25;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"Math", "MathBody", "MathChar", "MathEnd", "Word", "Smiley", "Url", "QUOT", 
		"DQUOT", "LPAREN", "RPAREN", "LACCOL", "RACCOL", "LBRACK", "RBRACK", "BACKTICK", 
		"DOLLAR", "LT", "GT", "DOT", "QMARK", "EMARK", "ELLIPS", "COMMA", "COLON", 
		"SEMICOLON", "WORD_START", "WORD_CHAR", "WORD_END", "SMILEY", "ESCAPED_CHAR", 
		"SPACE", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "'''", "'\"'", 
		"'('", "')'", "'{'", "'}'", "'['", "']'", "'`'", "'$'", "'<'", "'>'", 
		"'.'", "'?'", "'!'", "'\u2026'", "','", "':'", "';'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "Math", "Word", "Smiley", "Url", "QUOT", "DQUOT", "LPAREN", 
		"RPAREN", "LACCOL", "RACCOL", "LBRACK", "RBRACK", "BACKTICK", "DOLLAR", 
		"LT", "GT", "DOT", "QMARK", "EMARK", "ELLIPS", "COMMA", "COLON", "SEMICOLON", 
		"SMILEY", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SimpleTextLex._LITERAL_NAMES, SimpleTextLex._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SimpleTextLex.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SimpleTextLex._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "SimpleTextLex.g4"; }

	// @Override
	public get ruleNames(): string[] { return SimpleTextLex.ruleNames; }

	// @Override
	public get serializedATN(): string { return SimpleTextLex._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SimpleTextLex.channelNames; }

	// @Override
	public get modeNames(): string[] { return SimpleTextLex.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1B\xD1\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x07\x03K\n\x03\f\x03\x0E\x03" +
		"N\v\x03\x03\x03\x03\x03\x03\x04\x03\x04\x05\x04T\n\x04\x03\x05\x03\x05" +
		"\x05\x05X\n\x05\x03\x06\x03\x06\x03\x06\x07\x06]\n\x06\f\x06\x0E\x06`" +
		"\v\x06\x03\x06\x03\x06\x03\x06\x05\x06e\n\x06\x03\x07\x03\x07\x03\b\x06" +
		"\bj\n\b\r\b\x0E\bk\x03\b\x03\b\x03\b\x03\b\x03\b\x06\bs\n\b\r\b\x0E\b" +
		"t\x03\b\x03\b\x06\by\n\b\r\b\x0E\bz\x03\b\x03\b\x03\b\x03\b\x03\b\x06" +
		"\b\x82\n\b\r\b\x0E\b\x83\x03\b\x03\b\x05\b\x88\n\b\x03\t\x03\t\x03\n\x03" +
		"\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F" +
		"\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14" +
		"\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18" +
		"\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x05\x1C" +
		"\xB2\n\x1C\x03\x1D\x03\x1D\x05\x1D\xB6\n\x1D\x03\x1E\x03\x1E\x05\x1E\xBA" +
		"\n\x1E\x03\x1F\x03\x1F\x05\x1F\xBE\n\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x05\x1F\xC4\n\x1F\x03 \x03 \x03 \x03!\x03!\x03\"\x06\"\xCC\n\"\r\"\x0E" +
		"\"\xCD\x03\"\x03\"\x02\x02\x02#\x03\x02\x03\x05\x02\x02\x07\x02\x02\t" +
		"\x02\x02\v\x02\x04\r\x02\x05\x0F\x02\x06\x11\x02\x07\x13\x02\b\x15\x02" +
		"\t\x17\x02\n\x19\x02\v\x1B\x02\f\x1D\x02\r\x1F\x02\x0E!\x02\x0F#\x02\x10" +
		"%\x02\x11\'\x02\x12)\x02\x13+\x02\x14-\x02\x15/\x02\x161\x02\x173\x02" +
		"\x185\x02\x197\x02\x029\x02\x02;\x02\x02=\x02\x1A?\x02\x02A\x02\x02C\x02" +
		"\x1B\x03\x02\v\x04\x02\f\f&&\x05\x02\f\f\"\"&&\x03\x02c|\x03\x02\"\"\x0E" +
		"\x02\v\f\"$)+..00<=AA]_bb}}\x7F\x7F\u2028\u2028\r\x02\v\f\"#*+..00<=A" +
		"A]_}}\x7F\x7F\u2028\u2028\x03\x02<=\x06\x02*+FFrr~~\x05\x02\v\f\x0E\x0F" +
		"\"\"\x02\xD9\x02\x03\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02" +
		"\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02" +
		"\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02" +
		"\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02" +
		"\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02" +
		"\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-" +
		"\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02C\x03\x02\x02\x02" +
		"\x03E\x03\x02\x02\x02\x05L\x03\x02\x02\x02\x07S\x03\x02\x02\x02\tW\x03" +
		"\x02\x02\x02\vd\x03\x02\x02\x02\rf\x03\x02\x02\x02\x0F\x87\x03\x02\x02" +
		"\x02\x11\x89\x03\x02\x02\x02\x13\x8B\x03\x02\x02\x02\x15\x8D\x03\x02\x02" +
		"\x02\x17\x8F\x03\x02\x02\x02\x19\x91\x03\x02\x02\x02\x1B\x93\x03\x02\x02" +
		"\x02\x1D\x95\x03\x02\x02\x02\x1F\x97\x03\x02\x02\x02!\x99\x03\x02\x02" +
		"\x02#\x9B\x03\x02\x02\x02%\x9D\x03\x02\x02\x02\'\x9F\x03\x02\x02\x02)" +
		"\xA1\x03\x02\x02\x02+\xA3\x03\x02\x02\x02-\xA5\x03\x02\x02\x02/\xA7\x03" +
		"\x02\x02\x021\xA9\x03\x02\x02\x023\xAB\x03\x02\x02\x025\xAD\x03\x02\x02" +
		"\x027\xB1\x03\x02\x02\x029\xB5\x03\x02\x02\x02;\xB9\x03\x02\x02\x02=\xC3" +
		"\x03\x02\x02\x02?\xC5\x03\x02\x02\x02A\xC8\x03\x02\x02\x02C\xCB\x03\x02" +
		"\x02\x02EF\x05#\x12\x02FG\x05\x05\x03\x02GH\x05#\x12\x02H\x04\x03\x02" +
		"\x02\x02IK\x05\x07\x04\x02JI\x03\x02\x02\x02KN\x03\x02\x02\x02LJ\x03\x02" +
		"\x02\x02LM\x03\x02\x02\x02MO\x03\x02\x02\x02NL\x03\x02\x02\x02OP\x05\t" +
		"\x05\x02P\x06\x03\x02\x02\x02QT\n\x02\x02\x02RT\x05? \x02SQ\x03\x02\x02" +
		"\x02SR\x03\x02\x02\x02T\b\x03\x02\x02\x02UX\n\x03\x02\x02VX\x05? \x02" +
		"WU\x03\x02\x02\x02WV\x03\x02\x02\x02X\n\x03\x02\x02\x02Ye\x03\x02\x02" +
		"\x02Z^\x057\x1C\x02[]\x059\x1D\x02\\[\x03\x02\x02\x02]`\x03\x02\x02\x02" +
		"^\\\x03\x02\x02\x02^_\x03\x02\x02\x02_a\x03\x02\x02\x02`^\x03\x02\x02" +
		"\x02ab\x05;\x1E\x02be\x03\x02\x02\x02ce\x057\x1C\x02dY\x03\x02\x02\x02" +
		"dZ\x03\x02\x02\x02dc\x03\x02\x02\x02e\f\x03\x02\x02\x02fg\x05=\x1F\x02" +
		"g\x0E\x03\x02\x02\x02hj\t\x04\x02\x02ih\x03\x02\x02\x02jk\x03\x02\x02" +
		"\x02ki\x03\x02\x02\x02kl\x03\x02\x02\x02lm\x03\x02\x02\x02mn\x07<\x02" +
		"\x02no\x071\x02\x02op\x071\x02\x02pr\x03\x02\x02\x02qs\n\x05\x02\x02r" +
		"q\x03\x02\x02\x02st\x03\x02\x02\x02tr\x03\x02\x02\x02tu\x03\x02\x02\x02" +
		"u\x88\x03\x02\x02\x02vx\x05%\x13\x02wy\t\x04\x02\x02xw\x03\x02\x02\x02" +
		"yz\x03\x02\x02\x02zx\x03\x02\x02\x02z{\x03\x02\x02\x02{|\x03\x02\x02\x02" +
		"|}\x07<\x02\x02}~\x071\x02\x02~\x7F\x071\x02\x02\x7F\x81\x03\x02\x02\x02" +
		"\x80\x82\n\x05\x02\x02\x81\x80\x03\x02\x02\x02\x82\x83\x03\x02\x02\x02" +
		"\x83\x81\x03\x02\x02\x02\x83\x84\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02" +
		"\x85\x86\x05\'\x14\x02\x86\x88\x03\x02\x02\x02\x87i\x03\x02\x02\x02\x87" +
		"v\x03\x02\x02\x02\x88\x10\x03\x02\x02\x02\x89\x8A\x07)\x02\x02\x8A\x12" +
		"\x03\x02\x02\x02\x8B\x8C\x07$\x02\x02\x8C\x14\x03\x02\x02\x02\x8D\x8E" +
		"\x07*\x02\x02\x8E\x16\x03\x02\x02\x02\x8F\x90\x07+\x02\x02\x90\x18\x03" +
		"\x02\x02\x02\x91\x92\x07}\x02\x02\x92\x1A\x03\x02\x02\x02\x93\x94\x07" +
		"\x7F\x02\x02\x94\x1C\x03\x02\x02\x02\x95\x96\x07]\x02\x02\x96\x1E\x03" +
		"\x02\x02\x02\x97\x98\x07_\x02\x02\x98 \x03\x02\x02\x02\x99\x9A\x07b\x02" +
		"\x02\x9A\"\x03\x02\x02\x02\x9B\x9C\x07&\x02\x02\x9C$\x03\x02\x02\x02\x9D" +
		"\x9E\x07>\x02\x02\x9E&\x03\x02\x02\x02\x9F\xA0\x07@\x02\x02\xA0(\x03\x02" +
		"\x02\x02\xA1\xA2\x070\x02\x02\xA2*\x03\x02\x02\x02\xA3\xA4\x07A\x02\x02" +
		"\xA4,\x03\x02\x02\x02\xA5\xA6\x07#\x02\x02\xA6.\x03\x02\x02\x02\xA7\xA8" +
		"\x07\u2028\x02\x02\xA80\x03\x02\x02\x02\xA9\xAA\x07.\x02\x02\xAA2\x03" +
		"\x02\x02\x02\xAB\xAC\x07<\x02\x02\xAC4\x03\x02\x02\x02\xAD\xAE\x07=\x02" +
		"\x02\xAE6\x03\x02\x02\x02\xAF\xB2\n\x06\x02\x02\xB0\xB2\x05? \x02\xB1" +
		"\xAF\x03\x02\x02\x02\xB1\xB0\x03\x02\x02\x02\xB28\x03\x02\x02\x02\xB3" +
		"\xB6\n\x07\x02\x02\xB4\xB6\x05? \x02\xB5\xB3\x03\x02\x02\x02\xB5\xB4\x03" +
		"\x02\x02\x02\xB6:\x03\x02\x02\x02\xB7\xBA\n\x06\x02\x02\xB8\xBA\x05? " +
		"\x02\xB9\xB7\x03\x02\x02\x02\xB9\xB8\x03\x02\x02\x02\xBA<\x03\x02\x02" +
		"\x02\xBB\xBD\t\b\x02\x02\xBC\xBE\x07/\x02\x02\xBD\xBC\x03\x02\x02\x02" +
		"\xBD\xBE\x03\x02\x02\x02\xBE\xBF\x03\x02\x02\x02\xBF\xC4\t\t\x02\x02\xC0" +
		"\xC1\x07:\x02\x02\xC1\xC2\x07/\x02\x02\xC2\xC4\x07+\x02\x02\xC3\xBB\x03" +
		"\x02\x02\x02\xC3\xC0\x03\x02\x02\x02\xC4>\x03\x02\x02\x02\xC5\xC6\x07" +
		"^\x02\x02\xC6\xC7\v\x02\x02\x02\xC7@\x03\x02\x02\x02\xC8\xC9\t\n\x02\x02" +
		"\xC9B\x03\x02\x02\x02\xCA\xCC\x05A!\x02\xCB\xCA\x03\x02\x02\x02\xCC\xCD" +
		"\x03\x02\x02\x02\xCD\xCB\x03\x02\x02\x02\xCD\xCE\x03\x02\x02\x02\xCE\xCF" +
		"\x03\x02\x02\x02\xCF\xD0\b\"\x02\x02\xD0D\x03\x02\x02\x02\x13\x02LSW^" +
		"dktz\x83\x87\xB1\xB5\xB9\xBD\xC3\xCD\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SimpleTextLex.__ATN) {
			SimpleTextLex.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SimpleTextLex._serializedATN));
		}

		return SimpleTextLex.__ATN;
	}

}

